#!/usr/bin/bash

#
# pssid-test
# A command run by pssid to gather wireless metrics
#
# External programes used (and the package it is usually shipped with):
# - base64 (coreutils)
# - bc
# - cut (coreutils)
# - grep
# - jq
# - tail (coreutils)
# - timeout (coreutils)
# - wpa_cli (wpa_supplicant)
# - wpa_supplicant
# - xargs (findutils)

function main() {
	local -r log_file='/tmp/pssid-wpa_supplicant.log'
	local -i verbosity=0
	local wpa_conf
	local int
	local ctrl_path
	local init_time
	local connected_times
	local result
	local -i disconnect=0

	while getopts 'c:di:hv' opt; do
		case "${opt}" in
			c) wpa_conf="${OPTARG}" ;;
			d) disconnect=1 ;;
			i) int="${OPTARG}" ;;
			v) (( verbosity++ )) ;;
			h) help 0 ;;
			*) help 1 ;;
		esac
	done

	[[ "$UID" == 0 ]] || bail 1 "Must be root"
	[[ -n "${int}" ]] || bail 1 "Must specify the interface"
	[[ -n "${wpa_conf}" ]] || bail 1 "A wpa_supplicant config file is required"

	ctrl_path="$(grep ctrl_interface "${wpa_conf}" | cut -f 2 -d '=' | xargs)"
	[[ -n "${ctrl_path}" ]] || bail 1 "Configuration file must have a ctrl_interface directive"

	[[ "${disconnect}" == 1 ]] && bail 0

	if [[ -f "${log_file}" ]]; then
		if [[ ${verbosity} -gt 0 ]]; then
			echo "WARNING: log file '$log_file' already exists -- removing" >&2
		fi
		rm "${log_file}" || bail 255 "Error removing old log file"
	fi

	wpa_supplicant \
		-B \
		-t \
		-i "$int" \
		-c "$wpa_conf" \
		-f "${log_file}" \
		|| bail 1 "Error launching wpa_supplicant." \
			"Check the config file and interface name"
	timeout 10 \
		tail -f "${log_file}" \
			| grep -m 1 CTRL-EVENT-CONNECTED \
			> /dev/null
	result=$?
	if [[ $result == 0 ]]; then
		init_time="$(head -1 "${log_file}" | cut -f 1 -d ':')"
		wep_auth_starts="$(times_of 'Trying to authenticate with' "${log_file}")"
		assoc_starts="$(times_of 'Trying to associate with' "${log_file}")"
		assoc_ends="$(times_of 'Associated with' "${log_file}")"
		wpa_auth_starts="$(times_of 'CTRL-EVENT-EAP-STARTED' "${log_file}")"
		wpa_auth_ends="$(times_of 'CTRL-EVENT-EAP-SUCCESS' "${log_file}")"
		connected_times="$(times_of 'CTRL-EVENT-CONNECTED' "${log_file}")"

		jq --compact-output <<-EOF
		{
			"wpa_status": 0,
			"time_to_connect":   $(duration "${init_time}"       "${connected_times}" ),
			"time_to_scan":      $(duration "${init_time}"       "${wep_auth_starts}" ),
			"time_to_wep":       $(duration "${wep_auth_starts}" "${assoc_starts}"    ),
			"time_to_associate": $(duration "${assoc_starts}"    "${assoc_ends}"      ),
			"time_to_wpa":       $(duration "${wpa_auth_starts}" "${wpa_auth_ends}"   ),
			"wpa_log": "$(base64 -w 0 < ${log_file})"
		}
		EOF
	else
		jq --compact-output <<-EOF
		{
			"wpa_status": 1,
			"wpa_log": "$(base64 -w 0 < ${log_file})"
		}
		EOF
		bail 1
	fi
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	echo "Disconnect with: $self -d -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	exit "$1"
}

function bail() {
	local -i exit_code="$1"
	local -i i=0
	shift
	[[ -f "${log_file}" ]] && rm -f "${log_file}"
	[[ -S "${ctrl_path}/$int" ]] && wpa_cli -i "$int" terminate > /dev/null
	while [[ -n "$1" && i -le $verbosity ]]; do
		echo "$(basename "$0"): $1" >&2
		shift
		(( i++ ))
	done
	exit $exit_code
}

# Get the timestamps of lines that match "$1" from log "$2"
# The timestamps in the log are expected to befractional seconds since epoch,
# and are returned in the same format.
# Output is newline delimited
function times_of() {
	local match="$1"
	local log_file="$2"

	[[ -n "${match}" ]] || bail 255 "No match given"
	[[ -n "${log_file}" ]] || bail 255 "No log file given to search"

	grep "${match}" "${log_file}" | cut -f 1 -d ':'
}

# time between start ($1) and stop ($2) timestamps
# input and output are seconds since epoch
function duration() {
	bc <<< "$2 - $1"
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab
