#!/usr/bin/bash

#
# pssid-80211
# A command run by pssid to gather Wi-Fi metrics
#
# External programs used:
# - base64
# - cut
# - grep
# - jq
# - tail
# - timeout
# - wpa_cli
# - wpa_supplicant
# - xargs
# - zstd

source "$(dirname "$0")/libpssid.sh"
declare JSON
JSON="$(jq \
	--null-input \
	--compact-output \
	--argjson base "$(base_json)" \
	--argjson none "$(none)" \
	'$base | .internal += {
		"supplicant": {
			"config_file": $none,
			"ctrl_path": $none
		},
		"mon_pcap": {
			"enabled": false,
			"file": "/tmp/pssid_mon.pcap",
			"interface": $none,
			"pid": $none
		}
	}' \
	2>&1
)" || exit 255
declare -r WPAS_LOG_FILE='/tmp/pssid-wpa_supplicant.log'

function main() {
	local -i disconnect=0

	while getopts 'c:di:hm:v' opt; do
		case "${opt}" in
			c) set_internal_group 'supplicant' 'config_file' "${OPTARG}" ;;
			d) disconnect=1 ;;
			i) set_interface "${OPTARG}" ;;
			m) mon_enable "${OPTARG}" ;;
			v) increase_verbosity ;;
			h) help 0 ;;
			*) help 1 ;;
		esac
	done

	[[ "$UID" == 0 ]] || be_done 64 "Must be root"
	get_interface > /dev/null || be_done 65 'Must specify the interface'
	get_internal_group 'supplicant' 'config_file' > /dev/null \
		|| be_done 66 'A wpa_supplicant config file is required'
	set_internal_group 'supplicant' 'ctrl_path' "$(scrape_ctrl_path)"

	[[ "${disconnect}" == 1 ]] && terminate
	connect
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -c <wpa_supplicant.conf> -i <wlan interface> [-m <monitor interface>] [-v]"
	echo "Disconnect with: $self -d -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	exit "$1"
}

function connect() {
	! wpa_running || be_done 67 "wpa_supplicant is already running."

	if [[ -f "${WPAS_LOG_FILE}" ]]; then
		log 1 "WARNING: log file '${WPAS_LOG_FILE}' already exists -- removing"
		rm "${WPAS_LOG_FILE}" || be_done 254 "Error removing old log file"
	fi

	if mon_enabled; then
		log 2 "Starting tcpdump"
		tcpdump \
			--interface "$(get_interface || panic)" \
			-w "$(get_internal_group 'mon_pcap' 'file' || panic)" \
			--nano \
			> /dev/null 2>&1 \
			&
		set_internal_group 'mon_pcap' 'pid' $!
		log 2 "Started tcpdump"
	fi

	log 0 'Starting supplicant'
	wpa_supplicant \
		-Bt \
		-i "$(get_interface || panic)" \
		-c "$(get_internal_group 'supplicant' 'config_file' || panic)" \
		-f "$WPAS_LOG_FILE" \
		|| terminate \
			69 "Error launching wpa_supplicant" \
			1 "Check the config file and interface name"
	timeout 10 \
		tail -f "${WPAS_LOG_FILE}" \
		| grep -m 1 CTRL-EVENT-CONNECTED > /dev/null \
		|| terminate \
			1 "Unable to connect" \
			1 "wpa_supplicant exit status: $?"
	# shellcheck disable=SC2181
	# command is too long to reasonably use `if ! mycmd` syntax
	if [[ $? -gt 0 ]]; then
		log 0 'Unable to connect'
	else
		log 0 'Connected'
	fi

	if mon_enabled; then
		# TODO: is a sync necessary here?
		log 2 "Stopping tcpdump"
		kill "$(get_internal_group 'mon_pcap' 'pid' || panic)"
		log 2 "tcpdump killed"
		unset_internal_group 'mon_pcap' 'pid'
		JSON="$(jq \
			--compact-outputs \
			--arg pcap "$(get_internal_group 'mon_pcap' 'file' || panic)" \
			'.pcap = $pcap' \
			<<< "${JSON}"
		)"
		rm "$(get_internal_group 'mon_pcap' 'file' || panic)"
	fi
	be_done
}

function terminate() {
	[[ $# -ge 2 ]] && set_status "$@"

	log 0 'Disconnecting'
	wpa_running \
		&& wpa_cli \
			-i "$(get_interface || panic)" \
			-p "$(get_internal_group 'supplicant' 'ctrl_path')" \
			terminate \
			> /dev/null
	if [[ -f "${WPAS_LOG_FILE}" ]]; then
		JSON="$(jq \
			--compact-output \
			--argjson log "$(parse_log)" \
			'."wpa_log" = $log' \
			<<< "${JSON}"
		)"
		rm "${WPAS_LOG_FILE}"
	fi
	be_done
}

function parse_log() {
	jq \
		--raw-input \
		--slurp \
		--compact-output \
		'. / "\n"
		| map(select(. != "") / ":"
			| {
				"time": .[0] | tonumber,
				"msg": .[1:] | join(":") | ltrimstr(" ") | rtrimstr(" ")
			})' \
		< "${WPAS_LOG_FILE}"
}

function scrape_ctrl_path() {
	local config_file
	config_file="$(get_internal_group 'supplicant' 'config_file')" || panic
	grep ctrl_interface "${config_file}" \
		| cut -f 2 -d '=' \
		| xargs \
		|| panic 68 "Configuration file must have a ctrl_interface directive"
}

function mon_enable() {
	set_internal_group 'mon_pcap' 'interface' "$1"
	JSON="$(jq \
		--compact-output \
		'.internal.mon_pcap.enabled = true' \
		<<< "${JSON}"
	)"
}

function mon_enabled() {
	jq --exit-status '.internal.mon_pcap.enable' > /dev/null <<< "$JSON"
}

# Is the expected instance of wpa_supplicant already running?
function wpa_running() {
	[[ -S "$(internal | get 'supplicant' | get 'ctrl_path' || panic)/$(get_interface || panic)" ]]
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab textwidth=80 colorcolumn=81
