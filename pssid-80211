#!/usr/bin/bash

#
# pssid-80211
# A command run by pssid to gather Wi-Fi metrics
#
# External programes used:
# - base64
# - bc
# - cut
# - grep
# - jq
# - tail
# - timeout
# - wpa_cli
# - wpa_supplicant
# - xargs
# - zstd

function main() {
	local -r log_file='/tmp/pssid-wpa_supplicant.log'
	local -i verbosity=0
	local wpa_conf
	local int
	local ctrl_path
	local json
	local -i disconnect=0
	local -i global_status=0
	local mint=''
	local -r pcap='/tmp/pssid.pcap'
	local tcpdump_pid
	local json

	while getopts 'c:di:hm:v' opt; do
		case "${opt}" in
			c) wpa_conf="${OPTARG}" ;;
			d) disconnect=1 ;;
			i) int="${OPTARG}" ;;
			m) mint="${OPTARG}" ;;
			v) (( verbosity++ )) ;;
			h) help 0 ;;
			*) help 1 ;;
		esac
	done

	[[ "$UID" == 0 ]] || bail 1 "Must be root"
	[[ -n "${int}" ]] || bail 2 "Must specify the interface"
	[[ -n "${wpa_conf}" ]] || bail 3 "A wpa_supplicant config file is required"

	ctrl_path="$(grep ctrl_interface "${wpa_conf}" | cut -f 2 -d '=' | xargs)"
	[[ -n "${ctrl_path}" ]] || bail 4 "Configuration file must have a ctrl_interface directive"

	if [[ "${disconnect}" == 0 ]]; then
		connect || teardown $?
	else
		disconnect
		teardown $?
	fi
}

# inhereted parameters:
# - mint
# - int
# - pcap
# - wpa_conf
# - log_file
# - verbosity
function connect() {
	local -i status_code=0
	local json="{}"

	if wpa_running; then
		# TODO: move messages to json
		log "wpa_supplicant is already running."
		return 255
	fi

	if [[ -f "${log_file}" ]]; then
		if [[ ${verbosity} -gt 0 ]]; then
			# TODO
			echo "WARNING: log file '$log_file' already exists -- removing" >&2
		fi
		if ! rm "${log_file}"; then
			# TODO: "Error removing old log file"
		   	return 254
		fi
	fi

	if [[ -n "${mint}" ]]; then
		echo -n "Starting tcpdump ($(date '+%s.%6N'))..." >&2
		tcpdump -i "${mint}" -w "${pcap}" --nano > /dev/null 2>&1 &
		tcpdump_pid=$!
		echo "done ($(date '+%s.%6N'))" >&2
	fi

	if ! wpa_supplicant -Btd -i "$int" -c "$wpa_conf" -f "${log_file}"; then
		jq -c . <<- EOF | attach_log
			{
				"status_code": 5,
				"status_message": "Error launching wpa_supplicant"
			}
			EOF
		# TODO: "Error launching wpa_supplicant." "Check the config file and interface name"
		return 5
	else
		timeout 10 \
			tail -f "${log_file}" \
				| grep -m 1 CTRL-EVENT-CONNECTED \
				> /dev/null
		status_code=$?
	fi

	# TODO: pickup here
	echo "{\"status_code\": ${status_code}"

	return 0
}

function disconnect() {
	json="$(parse_results "")"
	if [[ -n "${mint}" ]]; then
		echo -n "Stopping tcpdump ($(date '+%s.%6N'))..." >&2
		kill "${tcpdump_pid}"
		echo "done ($(date '+%s.%6N'))" >&2
		json="$(attach_pcap <<< "${json}")"
	fi
	attach_log <<< "${json}"
	[[ ${global_status} == 0 ]] \
		|| bail "${global_status}" "Failed to connect; exiting wpa_supplicant"
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -c <wpa_supplicant.conf> -i <wlan interface> [-m <monitor interface>] [-v]"
	echo "Disconnect with: $self -d -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	exit "$1"
}

function log() {
	local -i i=0
	while [[ $# -gt 0 && $i -le $verbosity ]]; do
		[[ -n "$1" ]] && echo "$(basename "$0"): $1" >&2
		shift
		(( i++ ))
	done
}

function bail() {
	local -i exit_code="$1"
	shift
	wpa_running && wpa_cmd terminate > /dev/null
	log "$@"
	exit $exit_code
}

# Get the timestamps of lines that match "$1" (a PCRE) from log "$log_file"
# The timestamps in the log are expected to be fractional seconds since epoch,
# and are returned in the same format.
# Output is newline delimited
function times_of() {
	local match="$1"

	[[ -n "${match}" ]] || bail 253 "No match given"
	[[ -n "${log_file}" ]] || bail 252 "No log file given to search"

	grep -P "${match}" "${log_file}" | cut -f 1 -d ':'
	return "${PIPESTATUS[0]}"
}

function wpa_cmd() {
	wpa_cli -i "${int}" -p "${ctrl_path}" "$@"
}

# Is the expected instance of wpa_supplicant already running?
function wpa_running() {
	[[ -S "${ctrl_path}/${int}" ]]
}

# stdin: original json object
# stdout: json object with wpa_log
# inherited parameters:
# - log_file
function attach_log() {
	jq -c ". + {\"wpa_log\": \"$(encode < "${log_file}")\"}"
	rm "${log_file}"
}

function attach_pcap() {
	jq -c ". + {\"pcap\": \"$(encode < "${pcap}")\"}"
	rm "${pcap}"
}

function encode() {
	zstd | base64 -w 0
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab
