#!/usr/bin/bash

#
# pssid-80211
# A command run by pssid to gather Wi-Fi metrics
#
# External programes used:
# - base64
# - bc
# - cut
# - grep
# - jq
# - tail
# - timeout
# - wpa_cli
# - wpa_supplicant
# - xargs
# - zstd

function main() {
	local -r log_file='/tmp/pssid-wpa_supplicant.log'
	local -i verbosity=0
	local wpa_conf
	local int
	local ctrl_path
	local json
	local -i disconnect=0
	local global_status

	while getopts 'c:di:hv' opt; do
		case "${opt}" in
			c) wpa_conf="${OPTARG}" ;;
			d) disconnect=1 ;;
			i) int="${OPTARG}" ;;
			v) (( verbosity++ )) ;;
			h) help 0 ;;
			*) help 1 ;;
		esac
	done

	[[ "$UID" == 0 ]] || bail 1 "Must be root"
	[[ -n "${int}" ]] || bail 1 "Must specify the interface"
	[[ -n "${wpa_conf}" ]] || bail 1 "A wpa_supplicant config file is required"

	ctrl_path="$(grep ctrl_interface "${wpa_conf}" | cut -f 2 -d '=' | xargs)"
	[[ -n "${ctrl_path}" ]] || bail 1 "Configuration file must have a ctrl_interface directive"

	[[ "${disconnect}" == 1 ]] && bail 0

	if [[ -f "${log_file}" ]]; then
		if [[ ${verbosity} -gt 0 ]]; then
			echo "WARNING: log file '$log_file' already exists -- removing" >&2
		fi
		rm "${log_file}" || bail 255 "Error removing old log file"
	fi

	wpa_supplicant \
		-B \
		-t \
		-d \
		-i "$int" \
		-c "$wpa_conf" \
		-f "${log_file}" \
		|| bail 1 "Error launching wpa_supplicant." \
			"Check the config file and interface name"
	timeout 10 \
		tail -f "${log_file}" \
			| grep -m 1 CTRL-EVENT-CONNECTED \
			> /dev/null
	global_status=$?
	json="$(parse_results ${global_status})"
	log="$(zstd -qc "${log_file}" | base64)"
	jq -c ". + {\"wpa_log\": \"${log}\"}" <<< "${json}"
	[[ ${global_status} == 0 ]] \
		|| bail ${global_status} "Failed to connect; exiting wpa_supplicant"
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	echo "Disconnect with: $self -d -c <wpa_supplicant.conf> -i <wlan interface> [-v]"
	exit "$1"
}

# Arguments:
#   $1: overall status result
# Inherited parameters:
#   $wpa_conf
#   $ctrl_path
#   $int
function parse_results() {
	local json="{\"80211_status\": $1}"
	local sub_json
	local sub_status

	sub_json="$(parse_scan)"
	sub_status=$?
	json="$(jq -c ". + {\"scan\": ${sub_json}}" <<< "${json}")"
	if [[ ${sub_status} != 0 ]]; then
		echo "${json}"
		return ${sub_status}
	fi

	sub_json="$(parse_sme_auth)"
	sub_status=$?
	json="$(jq -c ". + {\"sme_auth\": ${sub_json}}" <<< "${json}")"
	if [[ ${sub_status} != 0 ]]; then
		echo "${json}"
		return ${sub_status}
	fi

	sub_json="$(parse_assoc)"
	sub_status=$?
	json="$(jq -c ". + {\"associate\": ${sub_json}}" <<< "${json}")"
	if [[ ${sub_status} != 0 ]]; then
		echo "${json}"
		return ${sub_status}
	fi

	if [[ "NONE" != "$(wpa_cmd get_network 0 key_mgmt)" ]]; then
		sub_json="$(parse_wpa)"
		sub_status=$?
		json="$(jq -c ". + {\"wpa\": ${sub_json}}" <<< "${json}")"
	fi

	jq -c . <<< "${json}"
	return $sub_status
}

# TODO:
# - Include found networks
# - Include scanned frequencies
function parse_scan() {
	local starts
	local stops
	local count
	local status_code
	local status_string

	if ! starts=$(times_of 'State: .* -> SCANNING'); then
		status_code=1
		status_string="No scan found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": 0
		}
		EOF
		return 1
	fi
	count=$(wc -l <<< "$starts")
	if [[ $count -gt 1 ]]; then
		log "${count} found; this tool currently parses exactly one scan" \
			"Scans started at:\n${starts}"
		status_code=2
		status_string="Not implemented: more than one scan found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": 0
		}
		EOF
		return ${status_code}
	fi
	if ! stops=$(times_of 'State: SCANNING -> .*'); then
		if ! stops=$(times_of 'No suitable network found'); then
			status_code=3
			status_string="No end of scan found"
			scan_count=0
		else
			status_code=4
			status_string='No suitable network found'
			scan_count=$(wc -l <<< "${stops}")
		fi
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": ${scan_count}
		}
		EOF
		return ${status_code}
	fi
	status_code=0
	status_string="success"
	jq -c . <<- EOF
	{
		"status_code": ${status_code},
		"status_string": "${status_string}",
		"scan_count": $count,
		"durations": [
			$(bc <<< "$stops - $starts")
		]
	}
	EOF
	return $status_code
}

function parse_sme_auth() {
	local starts
	local stops
	local count
	local status_code
	local status_string

	if ! starts=$(times_of 'State: .* -> AUTHENTICATING'); then
		status_code=1
		status_string="No SME authentication found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": 0
		}
		EOF
		return 1
	fi
	count=$(wc -l <<< "$starts")
	if [[ $count -gt 1 ]]; then
		log "${count} found; this tool currently parses exactly one auth" \
			"Auths started at:\n${starts}"
		status_code=2
		status_string="Not implemented: more than one auth found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	if ! stops=$(times_of 'State: AUTHENTICATING -> .*'); then
		status_code=3
		# TODO: this is inferred. State what actually happened instead
		status_string="Authentication failed"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	status_code=0
	status_string="success"
	jq -c . <<- EOF
	{
		"status_code": ${status_code},
		"status_string": "${status_string}",
		"scan_count": $count,
		"durations": [
			$(bc <<< "$stops - $starts")
		]
	}
	EOF
	return $status_code
}

function parse_assoc() {
	local starts
	local stops
	local count
	local status_code
	local status_string

	if ! starts=$(times_of 'State: .* -> ASSOCIATING'); then
		status_code=1
		status_string="No SME authentication found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": 0
		}
		EOF
		return 1
	fi
	count=$(wc -l <<< "$starts")
	if [[ $count -gt 1 ]]; then
		log "${count} found; this tool currently parses exactly one association attempt" \
			"Associations started at:\n${starts}"
		status_code=2
		status_string="Not implemented: more than one association found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	if ! stops=$(times_of 'State: ASSOCIATING -> .*'); then
		status_code=3
		status_string="Association failed"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	status_code=0
	status_string="success"
	jq -c . <<- EOF
	{
		"status_code": ${status_code},
		"status_string": "${status_string}",
		"scan_count": $count,
		"durations": [
			$(bc <<< "$stops - $starts")
		]
	}
	EOF
	return $status_code
}

function parse_wpa() {
	local starts
	local stops
	local count
	local status_code
	local status_string

	if ! starts=$(times_of 'State: ((?!4WAY_HANDSHAKE).*) -> 4WAY_HANDSHAKE'); then
		status_code=1
		status_string="No WPA handshake found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": 0
		}
		EOF
		return 1
	fi
	count=$(wc -l <<< "$starts")
	if [[ $count -gt 1 ]]; then
		log "${count} found; this tool currently parses exactly one WPA handshake attempt" \
			"Handshakes started at:\n${starts}"
		status_code=2
		status_string="Not implemented: more than one WPA handshake found"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	if ! stops=$(times_of 'State: .*_HANDSHAKE -> COMPLETED'); then
		status_code=3
		status_string="Handshake failed"
		jq -c . <<- EOF
		{
			"status_code": ${status_code},
			"status_string": "${status_string}",
			"scan_count": $count
		}
		EOF
		return ${status_code}
	fi
	status_code=0
	status_string="success"
	jq -c . <<- EOF
	{
		"status_code": ${status_code},
		"status_string": "${status_string}",
		"scan_count": $count,
		"durations": [
			$(bc <<< "$stops - $starts")
		]
	}
	EOF
	return $status_code
}

function log() {
	local -i i=0
	while [[ $# -gt 0 && i -le $verbosity ]]; do
		[[ -n "$1" ]] && echo "$(basename "$0"): $1" >&2
		shift
		(( i++ ))
	done
}

function bail() {
	local -i exit_code="$1"
	local -i i=0
	shift
	[[ -f "${log_file}" ]] && rm -f "${log_file}"
	[[ -S "${ctrl_path}/$int" ]] && wpa_cli \
		-i "$int" \
		-p "$ctrl_path" \
		terminate \
		> /dev/null
	log "$@"
	exit $exit_code
}

# Get the timestamps of lines that match "$1" from log "$log_file"
# The timestamps in the log are expected to be fractional seconds since epoch,
# and are returned in the same format.
# Output is newline delimited
function times_of() {
	local match="$1"

	[[ -n "${match}" ]] || bail 255 "No match given"
	[[ -n "${log_file}" ]] || bail 255 "No log file given to search"

	grep -P "${match}" "${log_file}" | cut -f 1 -d ':'
	return "${PIPESTATUS[0]}"
}

# time between start ($1) and stop ($2) timestamps
# input and output are seconds since epoch
function duration() {
	bc <<< "$2 - $1"
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab
