#!/usr/bin/bash

#
# pssid-dhcp
# A command run by pssid to gather dhcp metrics
#
# External programes used:
# - base64
# - bc
# - cut
# - grep
# - jq
# - tail
# - dhcpcd
# - zstd

source "$(dirname "$0")/libpssid.sh"
declare JSON
JSON="$(jq \
		--null-input \
		--compact-output \
		--argjson base "$(base_json)" \
		--argjson none "$(none)" \
		'$base
		| .addr_info = {}
		| .internal += {
			"pcap": {
				"file": "/tmp/pssid-dhcp.pcap",
				"enabled": false
			}
		}'
	)" \
	|| exit 255
declare -r DHCPCD_LOG_FILE='/tmp/pssid-dhcpcd.log'
declare SSID=""

function main() {
	local -i disconnect=0
	local -i dhcpcd_exit_status

	while getopts 'di:s:hv' opt; do
		case "${opt}" in
			d) disconnect=1 ;;
			i) set_interface "${OPTARG}" ;;
			s) SSID="${OPTARG}" ;;
			v) increase_verbosity ;;
			h) help 0 ;;
			*) help 64 ;;
		esac
	done

	[[ "$UID" == 0 ]] || be_done 65 'Must be root'
	get_interface > /dev/null || be_done 66 'Must specify the interface'
	[[ "${disconnect}" == 1 ]] && release
	dhcpcd_running \
		&& release 67 "dhcpcd already running; releasing and cleaning up"

	if [[ -f "${DHCPCD_LOG_FILE}" ]]; then
		log 1 "WARNING: log file '${DHCPCD_LOG_FILE}' already exists -- removing"
		rm "${DHCPCD_LOG_FILE}" || be_done 254 "Error removing old log file"
	fi

	get_addrs
	log_with_ssid 0 "dhcpcd started"
	dhcpcd "$(get_interface || panic)" -j "${DHCPCD_LOG_FILE}"
	dhcpcd_exit_status=$?
	log_with_ssid 0 "dhcpcd exited with status ${dhcpcd_exit_status}"
	get_addrs
	# TODO: get pcap and protocol duration

	[[ 0 -eq ${dhcpcd_exit_status} ]] \
		|| set_status 1 "dhcpcd exited with error status ${dhcpcd_exit_status}"
	be_done
}

function log_with_ssid() {
	local level="$1"
        local message="$2"
        if [[ -n "${SSID}" ]]; then
                log "${level}" "SSID: ${SSID} - ${message}"
        else
                log "${level}" "${message}"
        fi
}

function get_addrs() {
	log_with_ssid 1 "Getting $(get_interface || panic) addresses)"
	JSON="$(jq \
		--compact-output \
		--arg now "$(date +%s.%6N)" \
		--argjson info "$(ip -j addr show "$(get_interface || panic)" | jq '.[]')" \
		'.addr_info += {($now): $info}' \
		<<< "${JSON}"
	)"
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -i <wlan interface> [-v]"
	echo "Disconnect with: $self -d -i <wlan interface> [-s <ssid>] [-v]"
	exit "$1"
}

function release() {
	[[ $# -ge 2 ]] && set_status "$@"

	get_addrs
	log_with_ssid 0 "Releasing addresses"
	dhcpcd -k "$(get_interface || panic)" \
		|| set_status 2 "dhcpcd exited with status $? on release"
	log_with_ssid 1 "Addresses released"
	get_addrs
	if [[ -f "${DHCPCD_LOG_FILE}" ]]; then
		JSON="$(jq \
			--compact-output \
			--argjson log "$(parse_dhcpcd_log)" \
			'.dhcpcd_log = $log' \
			<<< "${JSON}"
		)"
		rm "${DHCPCD_LOG_FILE}" \
			|| log_with_ssid 1 "WARNING: unable to cleanup log file '${DHCPCD_LOG_FILE}'"
	fi
	be_done
}

function dhcpcd_running() {
	[[ -f "/run/dhcpcd/$(get_interface || panic).pid" ]]
}

function parse_dhcpcd_log() {
	jq \
		--raw-input \
		--slurp \
		'. / "\n"
			| map(select(. != "")
			| strptime("%B %d %H:%M:%S")
			| {
				"time": (.[:-1] | .[0] = (now | gmtime[0]) | mktime - (0 | localtime | mktime)),
				"pid": ((.[-1] / ":")[0] | ltrimstr(" [") | rtrimstr("]") | tonumber),
				"msg": (.[-1] / ":" | .[1:] | join(":") | ltrimstr(" "))
			}
		)' \
		< "${DHCPCD_LOG_FILE}"
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab
