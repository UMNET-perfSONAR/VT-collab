#!/usr/bin/bash

#
# pssid-dhcp
# A command run by pssid to gather dhcp metrics
#
# External programes used:
# - base64
# - bc
# - cut
# - grep
# - jq
# - tail
# - dhcpcd
# - zstd

source "$(dirname "$0")/libpssid.sh"
declare JSON

function main() {
	init_json || exit 1

	local -i disconnect=0
	local log_file

	while getopts 'di:hv' opt; do
		case "${opt}" in
			d) disconnect=1 ;;
			i) set_internal 'interface' "${OPTARG}" ;;
			v) increase_verbosity ;;
			h) help 0 ;;
			*) help 1 ;;
		esac
	done

	[[ "$UID" == 0 ]] || be_done 1 'Must be root'
	internal | get 'interface' > /dev/null || be_done 2 'Must specify the interface'
	[[ "${disconnect}" == 1 ]] && release
	dhcpcd_running && release 3 "dhcpcd already running; releasing and cleaning up"

	log_file="$(internal | get 'dhcpcd' | get 'log_file')"
	if [[ -f "${log_file}" ]]; then
		log 1 "WARNING: log file '$log_file' already exists -- removing"
		rm "${log_file}" || be_done 255 "Error removing old log file"
	fi

	log 0 "dhcpcd started"
	dhcpcd "$(internal | get 'interface')" -j "${log_file}" \
		|| be_done 4 "error running dhcpcd"
	set_internal_group dhcpcd 'exit_status' $?
	log 0 "dhcpcd exited"
	# TODO: get protocol duration

	be_done
}

function help() {
	local self
	self="$(basename "$0")"
	echo "Connect with: $self -i <wlan interface> [-v]"
	echo "Disconnect with: $self -d -i <wlan interface> [-v]"
	exit "$1"
}

function init_json() {
	JSON="$(base_json \
		| jq \
			--compact-output \
			--argjson none "$(none)" \
			'.internal += {
				"dhcpcd": {
					"log_file": "/tmp/pssid-dhcpcd.log",
					"duration": $none
				},
				"pcap": {
					"file": "/tmp/pssid-dhcp.pcap",
					"enabled": false
				}
			}'
		)"
}

function release() {
	local dhcpcd_log
	[[ $# -ge 2 ]] && set_status "$@"

	dhcpcd_running && dhcpcd -k "$(internal | get 'interface')"
	dhcpcd_log="$(internal | get 'dhcpcd' | get 'log_file')"
	if [[ -f "${dhcpcd_log}" ]]; then
		JSON="$(jq \
			--compact-output \
			--arg log "$(encode < "${dhcpcd_log}")" \
			'.dhcpcd_log = $log' \
			<<< "${JSON}"
		)"
		rm "${dhcpcd_log}"
	fi
	be_done
}

function dhcpcd_running() {
	[[ -f "/run/dhcpcd/$(internal | get 'interface').pid" ]]
}

main "$@"

# vim: ts=4 sts=4 sw=4 noexpandtab
